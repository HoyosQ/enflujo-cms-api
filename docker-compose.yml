# Referencia de las versiones del docker-compose:
# https://docs.docker.com/compose/compose-file/compose-versioning/
version: '3.2'

# La lista de contenedores que se van a crear y sincronizar entre si. La indentación es importante!
services:
  # ----- CONTENEDOR PARA BASE DE DATOS -----

  # Nombre de la aplicación para la base de datos.
  database:
    # Nombre para docker (útil para reconocer en interfaces de Docker)
    container_name: enflujo-cms-database
    # La imagen para la base de datos que se descarga de docker hub. 
    image: postgres:13
    ports:
      - 5432:5432
    # Persistencia de datos ya que cuando se apaga el contenedor se pierde.
    # La copia local que se mapea con el contenedor esta en /cms/data.
    volumes:
      - ./dump:/docker-entrypoint-initdb.d
      - ./data:/var/lib/postgresql/data
    # Nombre de la red de Docker que se encarga de orquestar la comunicación entre las aplicaciones / contenedores separados.
    networks:
      - enflujo-cms-network
    # Variables ambiente para la base de datos.
    environment:
      POSTGRES_USER: 'enflujo'
      POSTGRES_PASSWORD: 'enflujo'
      POSTGRES_DB: 'enflujo'

  # ----- CONTENEDOR PARA SISTEMA CACHE -----

  # Nombre de la aplicación para el sistema de cache.
  cache:
    # Nombre para docker.
    container_name: enflujo-cms-cache
    # La imagen para el sistema de cache que se descarga de docker hub.
    image: redis:6
    # Nombre de la red de Docker que se encarga de orquestar la comunicación entre las aplicaciones / contenedores separados.
    networks:
      - enflujo-cms-network
  
  # ----- CONTENEDOR PARA CMS -----
  
  # Nombre de la aplicación para el CMS.
  # Para referencia del Dockerfile que construye esta imagen:
  # https://github.com/directus/directus/blob/main/.github/actions/build-images/rootfs/directus/images/main/Dockerfile
  directus:
    # Nombre para docker.
    container_name: enflujo-cms
    # La imagen para el CMS que se descarga de docker hub. 
    image: directus/directus
    # Mapea el puerto del computador con el puerto dentro del contenedor donde se expone la aplicación.
    # Directus esta configurado dentro del contenedor en el puerto 8055 y abrimos el local en el mismo.
    # Los puertos se indican así - local:contenedor - el local se puede cambiar a otro si quisieramos o si lo tenemos ocupado. 
    ports:
      - 8055:8055
    # Los volumenes ayudan a mapear carpetas del contenedor con copias locales y de esta manera persisten en cada inicio del contenedor.
    volumes:
      # Copia local de los uploads queda en /cms/uploads
      - ./uploads:/directus/uploads
      # Copia local de las extensiones queda en /cms/extensions
      - ./extensions:/directus/extensions
    # Nombre de la red de Docker que se encarga de orquestar la comunicación entre las aplicaciones / contenedores separados.
    networks:
      - enflujo-cms-network
    # Al iniciar el contenedor le indicamos a Docker que aplicaciones se deben iniciar antes de esta ya que esta depenede de esos otros servicios.
    depends_on:
      - cache
      - database
    # Las variables ambiente del CMS, se pueden poner acá o en el archivo /.env durante producción.
    environment:
      KEY: '681c9420-b815-4325-9394-9f233fda62dc'
      SECRET: '3781c7d7-cf26-4a3b-9a33-8d584309c05b'

      # Variables para conectarse al contenedor que tiene la base de datos.
      DB_CLIENT: 'pg'
      DB_HOST: 'enflujo-cms-database'
      DB_PORT: '5432'
      # El nombre de la base de datos y sus credenciales las definimos antes en el contenedor de la base de datos.
      # Acá debemos usar las mismas.
      DB_DATABASE: 'enflujo'
      DB_USER: 'enflujo'
      DB_PASSWORD: 'enflujo'

      # Variables para conectarse al contenedor del sistema de cache.
      CACHE_ENABLED: 'true'
      CACHE_STORE: 'redis'
      CACHE_REDIS: 'redis://cache:6379'

      # Un usuario inicial para poder probar el CMS localmente, queda guardado en la base de datos.
      # Esto cambia en el despliegue.
      # https://docs.directus.io/reference/environment-variables/#misc
      ADMIN_EMAIL: 'admin@admin.com'
      ADMIN_PASSWORD: 'admin'

  pgadmin:
    container_name: enflujo-cms-pgadmin
    image: dpage/pgadmin4
    ports:
      - 5050:80
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    depends_on:
      - database
    networks:
      - enflujo-cms-network
    environment:
      PGADMIN_DEFAULT_EMAIL: 'admin@admin.com'
      PGADMIN_DEFAULT_PASSWORD: 'admin'
# Activa la red que orquesta la comunicación entre todos los contenedores.
networks:
  enflujo-cms-network: